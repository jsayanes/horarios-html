// ========================================
// SCRIPT PARA PROBAR FUNCIONAMIENTO EN PRODUCCI√ìN
// ========================================

console.log('üß™ Iniciando pruebas de producci√≥n...');

// Test 1: Verificar que Firebase est√© configurado
function testFirebaseConfig() {
    console.log('\nüìã Test 1: Verificando configuraci√≥n Firebase...');
    
    if (window.FIREBASE_CONFIG) {
        console.log('‚úÖ Configuraci√≥n Firebase encontrada');
        console.log('üîß Proyecto:', window.FIREBASE_CONFIG.projectId);
        console.log('üåê Auth Domain:', window.FIREBASE_CONFIG.authDomain);
        return true;
    } else {
        console.error('‚ùå Configuraci√≥n Firebase NO encontrada');
        return false;
    }
}

// Test 2: Verificar m√≥dulos de Firebase
function testFirebaseModules() {
    console.log('\nüìã Test 2: Verificando m√≥dulos Firebase...');
    
    if (window.FirebaseModules) {
        console.log('‚úÖ M√≥dulos Firebase cargados');
        const modules = Object.keys(window.FirebaseModules);
        console.log('üì¶ M√≥dulos disponibles:', modules);
        return true;
    } else {
        console.error('‚ùå M√≥dulos Firebase NO cargados');
        return false;
    }
}

// Test 3: Verificar funcionalidad de Firestore
function testFirestoreConnection() {
    console.log('\nüìã Test 3: Probando conexi√≥n Firestore...');
    
    if (window.firestoreSync) {
        console.log('‚úÖ FirestoreSync disponible');
        console.log('üîß M√©todos:', Object.keys(window.firestoreSync));
        return true;
    } else {
        console.error('‚ùå FirestoreSync NO disponible');
        return false;
    }
}

// Test 4: Verificar sincronizaci√≥n
function testSyncFunctionality() {
    console.log('\nüìã Test 4: Probando sincronizaci√≥n...');
    
    // Verificar si hay elementos draggables
    const subjects = document.querySelectorAll('.subject');
    const cells = document.querySelectorAll('.schedule-cell');
    
    console.log(`üìö Materias encontradas: ${subjects.length}`);
    console.log(`üìã Celdas de horario: ${cells.length}`);
    
    if (subjects.length > 0 && cells.length > 0) {
        console.log('‚úÖ Elementos de interfaz correctos');
        return true;
    } else {
        console.error('‚ùå Elementos de interfaz faltantes');
        return false;
    }
}

// Test 5: Verificar LocalStorage
function testLocalStorage() {
    console.log('\nüìã Test 5: Verificando LocalStorage...');
    
    try {
        localStorage.setItem('test_horarios', 'test_value');
        const value = localStorage.getItem('test_horarios');
        localStorage.removeItem('test_horarios');
        
        if (value === 'test_value') {
            console.log('‚úÖ LocalStorage funcionando');
            return true;
        } else {
            console.error('‚ùå LocalStorage no responde correctamente');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error en LocalStorage:', error);
        return false;
    }
}

// Ejecutar todas las pruebas
function runAllTests() {
    console.log('üöÄ Ejecutando todas las pruebas...\n');
    
    const tests = [
        { name: 'Configuraci√≥n Firebase', test: testFirebaseConfig },
        { name: 'M√≥dulos Firebase', test: testFirebaseModules },
        { name: 'Conexi√≥n Firestore', test: testFirestoreConnection },
        { name: 'Funcionalidad Sync', test: testSyncFunctionality },
        { name: 'LocalStorage', test: testLocalStorage }
    ];
    
    let passed = 0;
    let failed = 0;
    
    tests.forEach((testCase, index) => {
        try {
            const result = testCase.test();
            if (result) {
                passed++;
            } else {
                failed++;
            }
        } catch (error) {
            console.error(`‚ùå Error en test "${testCase.name}":`, error);
            failed++;
        }
    });
    
    console.log('\nüìä RESULTADOS FINALES:');
    console.log(`‚úÖ Pruebas exitosas: ${passed}`);
    console.log(`‚ùå Pruebas fallidas: ${failed}`);
    console.log(`üìà Porcentaje de √©xito: ${Math.round((passed / tests.length) * 100)}%`);
    
    if (failed === 0) {
        console.log('\nüéâ ¬°TODAS LAS PRUEBAS PASARON! El sistema est√° funcionando correctamente.');
        
        // Mostrar notificaci√≥n si est√° disponible
        if (typeof showNotification === 'function') {
            showNotification('üéâ Todas las pruebas de producci√≥n exitosas', 'success');
        }
    } else {
        console.log('\n‚ö†Ô∏è Algunas pruebas fallaron. Revisar configuraci√≥n.');
        
        if (typeof showNotification === 'function') {
            showNotification(`‚ö†Ô∏è ${failed} pruebas fallaron - revisar console`, 'warning');
        }
    }
    
    return { passed, failed, total: tests.length };
}

// Auto-ejecutar pruebas cuando el DOM est√© listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(runAllTests, 3000); // Esperar 3 segundos para que todo est√© cargado
    });
} else {
    setTimeout(runAllTests, 3000);
}

// Exportar funci√≥n para uso manual
window.testProduction = runAllTests;